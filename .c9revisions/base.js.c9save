{"ts":1358349500553,"silentsave":true,"restoring":false,"patch":[[{"diffs":[[1,"/*\r\n\tTODO:\r\n\t-what if you change the address while the spinner is loading, before response received?\r\n\t-Warning icon for override & server down? Default icon when loading existing ticket must change for this\r\n*/\r\n\r\nvar SERVICE_AREAS = {\r\n\t'SA_PLANNING_2000Councilmanic': {\r\n\t\tid: 'SA_PLANNING_2000Councilmanic',\r\n\t\tnode: NODES.citycouncil,\r\n\t\ttable: TABLES.citycouncil\r\n\t},\r\n\t'SA_POLICE_District': {\r\n\t\tid: 'SA_POLICE_District',\r\n\t\tnode: NODES.police,\r\n\t\ttable: TABLES.police\r\n\t},\r\n\t'311_Mobile': {\r\n\t\tid: '311_Mobile',\r\n\t\tnode: NODES.phillyrising,\r\n\t\ttable: TABLES.phillyrising\r\n\t}\r\n};\r\n\r\nvar MIN_CONFIDENCE = 85;\r\nvar VERIFIED_DEFAULT = '1';\r\nvar VERIFIED_OVERRIDE = '2';\r\nvar OVERRIDE_STRING = '*';\r\nvar ICONS = {\r\n\tspinner: {url: 'http://philly311.novosolutions.net/admin/virtual/demo_images/spinner-grey-small.gif'},\r\n\tsuccess: {url: 'http://cdn.dustball.com/accept.png'},\r\n\terror: {url: 'http://cdn.dustball.com/cancel.png'}\r\n};\r\n\r\n$(document).ready(function() {\r\n\t// Ensure we're modifying at a service request of one of the proper templates\r\n\tif(window.location.pathname == PATH_NAME && valueInObject($(NODES.template).val(), TEMPLATES) != -1) {\r\n\t\t// Add verify button & icons to template\r\n\t\tvar verify_button = $('<button/>').text('Verify').addClass('button').css('cursor', 'pointer');\r\n\t\tICONS.spinner.node = $('<img/>').attr('src', ICONS.spinner.url).css('vertical-align', 'middle').hide();\r\n\t\tICONS.success.node = $('<img/>').attr('src', ICONS.success.url).css('vertical-align', 'middle').hide();\r\n\t\tICONS.error.node = $('<img/>').attr('src', ICONS.error.url).css('vertical-align', 'middle').hide();\r\n\t\t\r\n\t\t// Add icons and verify button after the address field\r\n\t\t$(NODES.input_address).after(ICONS.error.node).after(ICONS.success.node).after(ICONS.spinner.node).after(verify_button);\r\n\t\t\r\n\t\t// Shrink address field so verify button fits (must be after verify_button is added to DOM to get its width)\r\n\t\t$(NODES.input_address).width($(NODES.input_address).width() - verify_button.width() - 26);\r\n\t\t\r\n\t\t// Verify button functionality\r\n\t\tverify_button.click(function(e) {\r\n\t\t\te.preventDefault(); // Cancel normal click action\r\n\t\t\tvar department = $(NODES.department).val();\r\n\t\t\tvar category = $(NODES.category).val();\r\n\t\t\tvar input_address = $.trim($(NODES.input_address).val());\r\n\t\t\t\r\n\t\t\t// If address field is empty\r\n\t\t\tif( ! input_address) {\r\n\t\t\t\talert('Please provide an address to verify');\r\n\t\t\t}\r\n\t\t\t// If address includes override key, override verification and mark verified\r\n\t\t\telse if(input_address.indexOf(OVERRIDE_STRING) != -1) {\r\n\t\t\t\tset_icon('success');\r\n\t\t\t\treset('override');\r\n\t\t\t\t$(NODES.input_address).val(input_address.replace(OVERRIDE_STRING, '')); // Remove override string (wildcard)\r\n\t\t\t}\r\n\t\t\t// If department or category not selected\r\n\t\t\telse if( (! department || department == '_null' || ! category || category == '0') && $(NODES.template).val() != TEMPLATES.smoke_alarm) {\r\n\t\t\t\talert('Please select a Category and Department before verifying the address');\r\n\t\t\t}\r\n\t\t\t// Otherwise run address verification\r\n\t\t\telse {\r\n\t\t\t\tulrs311.reset(); // Reset results array\r\n\t\t\t\tset_icon('spinner'); // Show loading icon\r\n\t\t\t\t// If department is L&I or category is vacant lot, use L&I address format\r\n\t\t\t\tif(department == NODE_VALUES.department_li || category == NODE_VALUES.category_vacant_lot) {\r\n\t\t\t\t\tvar unit = input_address.match(/ UNIT: \\d+$/); // Detect \" UNIT: ##\"\r\n\t\t\t\t\tif(unit && unit.length) { // If unit number is in the address string, remove it and store it to be appended after verification\r\n\t\t\t\t\t\tunit = unit[0];\r\n\t\t\t\t\t\tinput_address = input_address.substr(0, input_address.length - unit.length);\r\n\t\t\t\t\t}\r\n\t\t\t\t\tulrs311.liaddress(input_address, check_results, unit);\r\n\t\t\t\t\tulrs311.location(input_address, ['xy'], check_results, 'LI');\r\n\t\t\t\t\tulrs311.service_areas(input_address, check_results);\r\n\t\t\t\t}\r\n\t\t\t\t// If department is Streets, use SnapNearCenterline\r\n\t\t\t\telse if(department == NODE_VALUES.department_streets) {\r\n\t\t\t\t\tulrs311.location(input_address, ['xy', 'standardized_address'], check_results, 'Streets');\r\n\t\t\t\t\tulrs311.service_areas(input_address, check_results);\r\n\t\t\t\t}\r\n\t\t\t\t// For everything else\r\n\t\t\t\telse {\r\n\t\t\t\t\tulrs311.location(input_address, ['xy', 'standardized_address'], check_results);\r\n\t\t\t\t\tulrs311.service_areas(input_address, check_results);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}).hover(function() {\r\n\t\t\t// Add Novo UI highlight functionality\r\n\t\t\t$(this).toggleClass('buttonhover');\r\n\t\t});\r\n\t\t\r\n\t\t// If address, department, or category changes, mark unverified\r\n\t\t$(NODES.input_address).add(NODES.department).add(NODES.category).change(function() {\r\n\t\t\tif($(NODES.verified).val()) {\r\n\t\t\t\treset();\r\n\t\t\t\tset_icon();\r\n\t\t\t}\r\n\t\t});\r\n\t\t\r\n\t\t// Hide secret fields\r\n\t\t$(NODES.verified).add(NODES.xcoord).add(NODES.ycoord).add(NODES.label_verified).add(NODES.label_xcoord).add(NODES.label_ycoord).hide();\r\n\t\t\r\n\t\t// If address is already verified (ex. viewing existing ticket), show success icon\r\n\t\tif($(NODES.verified).val() != TABLES.verified['default']) {\r\n\t\t\tset_icon('success');\r\n\t\t}\r\n\t}\r\n});\r\n\r\n// Callback function - called every time a request completes/fails, to check if all the requests have been made (even if some failed)\r\nfunction check_results(calledby) {\r\n\t// Check that standardized_address, x/y, & service areas requests have been completed (if not, it still waiting)\r\n\tif( ! ulrs311.results.hasOwnProperty('standardized_address') || ! ulrs311.results.hasOwnProperty('xcoord') \r\n\t|| ! ulrs311.results.hasOwnProperty('ycoord') || ! ulrs311.results.hasOwnProperty('service_areas')) {\r\n\t\tif(DEBUG) console.log('check_results('+calledby+') Not Completed Yet');\r\n\t\treturn;\r\n\t}\r\n\tif(DEBUG) console.log('check_results('+calledby+') Completed');\r\n\t\r\n\t// We'll arrive here only if all the requests have completed (though they may have errors, in which case they'll be null)\r\n\t// Now check if required field(s) were fetched successfully\r\n\tif(ulrs311.results.standardized_address) {\r\n\t\t// Fill in the form with the fetched values\r\n\t\t$(NODES.standardized_address).val(ulrs311.results.standardized_address);\r\n\t\t$(NODES.xcoord).val(ulrs311.results.xcoord);\r\n\t\t$(NODES.ycoord).val(ulrs311.results.ycoord);\r\n\t\tset_service_areas(ulrs311.results.service_areas);\r\n\t\t\r\n\t\t// Set verified to true\r\n\t\tset_verified(true);\r\n\t\tset_icon('success');\r\n\t}\r\n\t// Otherwise clear the form\r\n\telse {\r\n\t\tif(DEBUG) console.log('Resetting');\r\n\t\treset();\r\n\t\tset_icon('error');\r\n\t}\r\n}\r\n\r\n// Accepts: true, false, 'override', 'down', <empty>\r\nfunction set_verified(status) {\r\n\tvar key;\r\n\tif(status === true) {\r\n\t\tkey = TABLES.verified['verified'];\r\n\t}\r\n\telse if(status && status in TABLES.verified) {\r\n\t\tkey = TABLES.verified[status];\r\n\t}\r\n\telse {\r\n\t\tkey = TABLES.verified['default'];\r\n\t}\r\n\t$(NODES.verified).val(key);\r\n}\r\n\r\nfunction set_service_areas(values) {\r\n\t$.each(SERVICE_AREAS, function(key, val) {\r\n\t\tif($.isPlainObject(values) && val.id in values && typeof values[val.id] == 'string') {\r\n\t\t\t$(val.node).val(val.table[values[val.id]]);\r\n\t\t}\r\n\t\telse {\r\n\t\t\t$(val.node).val(val.table['default']);\r\n\t\t}\r\n\t});\r\n}\r\n\r\nfunction set_icon(icon) {\r\n\tif(icon == 'spinner') $(ICONS.spinner.node).show();\r\n\telse $(ICONS.spinner.node).hide();\r\n\t\r\n\tif(icon == 'success') $(ICONS.success.node).show();\r\n\telse $(ICONS.success.node).hide();\r\n\t\r\n\tif(icon == 'error') $(ICONS.error.node).show();\r\n\telse $(ICONS.error.node).hide();\r\n}\r\n\r\nfunction reset(verified) {\r\n\t$(NODES.xCoord).val(''); // Reset longitude\r\n\t$(NODES.yCoord).val(''); // Reset latitude\r\n\tset_service_areas(); // Reset service areas\r\n\tset_verified(verified ? verified : false); // Reset verified\r\n}\r\n\r\nfunction valueInObject(needle, haystack) {\r\n\tfor(i in haystack) {\r\n\t\tif(haystack[i] == needle) return i;\r\n\t}\r\n\treturn -1;\r\n}"]],"start1":0,"start2":0,"length1":0,"length2":7694}]],"length":7694}
{"contributors":[],"silentsave":false,"ts":1358349505308,"patch":[[{"diffs":[[0,"NS = {\r\n"],[-1,"\t"],[1,"    "],[0,"spinner:"]],"start1":710,"start2":710,"length1":17,"length2":20},{"diffs":[[0,"311."],[-1,"novosolutions.net"],[1,"phila.gov"],[0,"/adm"]],"start1":751,"start2":751,"length1":25,"length2":17},{"diffs":[[0,"ual/"],[-1,"demo_i"],[1,"imgs/BannerI"],[0,"mage"]],"start1":775,"start2":775,"length1":14,"length2":20},{"diffs":[[0,"p://"],[-1,"cdn.dustball.com/accept"],[1,"philly311.phila.gov/admin/virtual/imgs/BannerImages/success"],[0,".png"]],"start1":844,"start2":844,"length1":31,"length2":67},{"diffs":[[0,"p://"],[-1,"cdn.dustball.com/cancel"],[1,"philly311.phila.gov/admin/virtual/imgs/BannerImages/error"],[0,".png"]],"start1":934,"start2":934,"length1":31,"length2":65}]],"length":7765,"saved":false}
